name: Terraform


on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  provision-ec2:
    runs-on: ubuntu-latest
    environment: Node-Architecture-env-variables
    outputs:
      SERVER_PUBLIC_IP: ${{ steps.set-ip.outputs.instance_public_ip}}
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: us-east-1
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Terraform Apply
        id:   apply
        env:
          TF_VAR_ec2_name:  "${{ github.event.inputs.ec2-name }}"
          TF_VAR_private_key:   ${{ secrets.AWS_SSH_KEY_PRIVATE }}
        run: |
          cd terraform/
          terraform init
          terraform validate
          terraform plan 
          terraform apply -auto-approve
          
      - name: Set output
        id: set-ip
        run: |-
          echo "::set-output name=instance_public_ip::$(terraform output instance_public_ip)"
        working-directory: ./terraform
        

  deploy-app:
    runs-on: ubuntu-latest
    environment: Node-Architecture-env-variables
    needs: provision-ec2
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      
      - name: Setup Node.js environment
        uses: actions/setup-node@v3.4.1
      
      - name: Set IP env variable
        run: echo SERVER_PUBLIC_IP=${{ needs.provision-ec2.outputs.SERVER_PUBLIC_IP }} >> $GITHUB_ENV
      
      - name: print ip
        run: echo " Print a single environment variable (the commit SHA ) - ${{ needs.provision-ec2.outputs.SERVER_PUBLIC_IP }} "

      
      - name: Npm install & npm build
        run:  |
            npm install
            npm run build        
        env:
           url: ${{ needs.provision-ec2.outputs.SERVER_PUBLIC_IP }}
        

      # This will build and push.. if need enable.

      - name: Build & push Docker image
        uses: mr-smithers-excellent/docker-build-push@v5
        with:
          image: raj77aws/node-kit-repo
          dockerfile: Dockerfile
          tags: v2, latest
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Login
        uses: docker/login-action@v2
        with: 
           username: ${{ secrets.DOCKER_USERNAME }}
           password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.AWS_ACCESS_KEY_ID }}'
          aws-secret-access-key: '${{ secrets.AWS_SECRET_ACCESS_KEY }}'
          aws-region: us-east-1


      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "$SSH_KEY" > ~/.ssh/github-actions-key
          chmod 600 ~/.ssh/github-actions-key
          cat >>~/.ssh/config <<END
          Host ec2
            HostName $SSH_HOST
            User $SSH_USER
            IdentityFile ~/.ssh/github-actions-key
            StrictHostKeyChecking no
          END
        env:
          SSH_HOST: ${{ needs.provision-ec2.outputs.SERVER_PUBLIC_IP }}
          SSH_USER: ec2-user
          SSH_KEY: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install Docker Command Using SSH
        run: ssh ec2 'sudo yum update -y &&
             sudo yum install docker -y &&
             sudo service docker start &&
             sudo usermod -a -G docker ec2-user &&
             exit'

      - name: Sleep for 30 seconds
        uses: jakejarvis/wait-action@master
        with:
          time: '20s'

      - name: PUll Image and Run Docker
        run: ssh ec2 'echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username raj77aws --password-stdin &&
             docker pull raj77aws/node-kit-repo:v2 &&
             docker images &&
             docker run  -d -p 80:4001 raj77aws/node-kit-repo:v2'
        
        
      
      # This is not working
                
      #- name: Executing remote ssh commands using ssh key
      #  uses: appleboy/ssh-action@master
      #  with:
      #   host: ${{ needs.provision-ec2.outputs.SERVER_PUBLIC_IP }}
      #   username: ec2-user
      #   key: ${{ secrets.AWS_SSH_KEY_PRIVATE }}
      #   port: 22
      #   script: |
      #      echo "$key" > private_key && chmod 600 private_key
      #      ssh -o StrictHostKeyChecking=no -i private_key ${username}@${host}
      #      sudo yum update -y
      #      sudo yum install docker -y
      #      sudo service docker start
      #      sudo usermod -a -G docker ec2-user
      #      sudo su docker pull changan1111/newdocker:v2
      #      sudo su docker run  -p 80:3000 changan1111/newdocker:v2
        